class Graph:
    
    def __init__(self, size):
        self.adj = []
        for i in range(size):
            self.adj.append([0 for i in range(size)])
            
    def addEdge(self, v1, v2):
        if v1 == v2:
            print("Same vertices, {} and {}".format(v1, v2))
        else:
            self.adj[v1][v2] = 1
            self.adj[v2][v1] = 1  
    
    def removeEdge(self, v1, v2):
        if(self.adj[v1][v2] == 1):
            self.adj[v1][v2] = 0
            self.adj[v2][v1] = 0
        else:
            print("There is no edge between {} and {}". format(v1, v2))
    def containsEdge(self, v1, v2):
        if(self.adj[v1][v2] > 0):
            print("Yes there is an edge between {} and {}".format(v1, v2))
        else:
            print("No there is no edge between {} and {}".format(v1, v2))
        
    def display(self):
        for i in range(len(self.adj)):
            print(self.adj[i])
        
    

graph_object = Graph(5)
graph_object.addEdge(0, 1)
graph_object.addEdge(0, 4)
graph_object.addEdge(4, 4)
graph_object.addEdge(1, 2)
graph_object.addEdge(1, 3)
graph_object.addEdge(1, 4)
graph_object.addEdge(2, 3)
graph_object.addEdge(3, 4)
print("**************")
print("The adjacency matrix after performing addEdge operation")
graph_object.display()
print("**************")
graph_object.containsEdge(1,2)
graph_object.containsEdge(4,4)
graph_object.removeEdge(0, 3)
graph_object.removeEdge(1, 2)
graph_object.removeEdge(1, 3)
print("**************")
print("The adjacency matrix after performing removeEdge operation")
graph_object.display()
print("**************")
graph_object.containsEdge(1,3)
graph_object.containsEdge(1,4)

